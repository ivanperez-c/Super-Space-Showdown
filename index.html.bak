<head>
	<script src="//cdn.jsdelivr.net/npm/phaser@3.20.1/dist/phaser.js"> </script>
</head>
<body>
	<script type="text/javascript">
		var config = {
			type: Phaser.AUTO,
			width: 800,
			height: 600,
			physics: {
				default: 'arcade',
				arcade: {
					gravity: { y: 300 },
					debug: false
				}
			},
			scene: {
				preload: preload,
				create: create,
				update: update
			}
		};
		
		var player;
		var stars;
		var platforms;
		var cursors;
		var score = 0;
		var scoreText;
		
		//Necesario para iniciar un juego
		var game = new Phaser.Game(config); 
		
		//Función que precarga los assets
		function preload ()
		{
			this.load.image('sky', 'assets/sky.png');
			this.load.image('ground', 'assets/platform.png');
			this.load.image('star', 'assets/star.png');
			this.load.image('bomb', 'assets/bomb.png');
			this.load.spritesheet('dude', 'assets/dude.png',
								{ frameWidth: 32, frameHeight: 48 });
		}
		
		//Función que se encarga de crear las cosas
		function create ()
		{
			//Añadimos un fondo
			this.add.image(400, 300, 'sky');
			
			//Creación del grupo de plataformas
			platforms = this.physics.add.staticGroup();
			
			//Añadimos las plataformas
			platforms.create(400, 568, 'ground').setScale(2).refreshBody();

			platforms.create(600, 400, 'ground');
			platforms.create(50, 250, 'ground');
			platforms.create(750, 220, 'ground');
			
			//Creación del personaje
			player = this.physics.add.sprite(100, 450, 'dude');

			//Propiedades físicas del personaje
			player.setBounce(0.2);
			player.setCollideWorldBounds(true);

			//Animaciones del jugador
			this.anims.create({
				key: 'left',
				frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
				frameRate: 10,
				repeat: -1
			});

			this.anims.create({
				key: 'turn',
				frames: [ { key: 'dude', frame: 4 } ],
				frameRate: 20
			});

			this.anims.create({
				key: 'right',
				frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
				frameRate: 10,
				repeat: -1
			});
			
			//Gestor de teclado
			cursors = this.input.keyboard.createCursorKeys();
			keyA = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);
			keyS = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);
			keyD = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);
			keyW = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);
			
			
			//Creación del grupo de estrellas
			stars = this.physics.add.group({
				key: 'star',
				repeat: 11,
				setXY: { x: 12, y: 0, stepX: 70 }
			});

			stars.children.iterate(function (child) {
			
			//Agregar un rebote a las estrellas
			child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
			});
			
			//Creación del grupo de bombas
			bombs = this.physics.add.group();
			
			//El marcador
			scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

			//Añadir detección de colisiones de los objetos y las plataformas
			this.physics.add.collider(player, platforms);
			this.physics.add.collider(stars, platforms);
			this.physics.add.collider(bombs, platforms);
			
			//Colisión jugador y estrellas
			this.physics.add.overlap(player, stars, collectStar, null, this);
			
			//Colisión jugador y bombas
			this.physics.add.collider(player, bombs, hitBomb, null, this);
		}

		function update ()
		{
			if (keyA.isDown.isDown)
			{
				player.setVelocityX(-160);

				player.anims.play('left', true);
			}
			else if (cursors.right.isDown)
			{
				player.setVelocityX(160);

				player.anims.play('right', true);
			}
			else
			{
				player.setVelocityX(0);

				player.anims.play('turn');
			}

			if (cursors.up.isDown && player.body.touching.down)
			{
				player.setVelocityY(-330);
			}
		}
		
		function collectStar (player, star)
		{
			star.disableBody(true, true);
			
			//Actualización del marcador
			score += 10;
			scoreText.setText('Score: ' + score);
			
			//Si se acaban las etrellas creamos más
			if (stars.countActive(true) === 0)
			{
				stars.children.iterate(function (child) {

				child.enableBody(true, child.x, 0, true, true);

				});

				var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);

				var bomb = bombs.create(x, 16, 'bomb');
				bomb.setBounce(1);
				bomb.setCollideWorldBounds(true);
				bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
				bomb.allowGravity = false;

			}
		}
		
		function hitBomb (player, bomb)
		{
			this.physics.pause();

			player.setTint(0xff0000);

			player.anims.play('turn');

			gameOver = true;
		}

	</script>
</body>